// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////*************************////////////////////////////////////////////////////////

model User {
  id            String             @id @default(uuid())
  name          String
  email         String             @unique
  document      String?            @unique
  documentType  DocumentType       @default(cpf)
  salt          String
  passwordHash  String
  birthDate     DateTime?
  gender        Gender?
  phone         String?
  occupation    String?
  nationality   String?
  maritalStatus MaritalStatusEnum?
  photoUrl      String?
  userType      UserType           @default(client)

  userHolding        Holding?          @relation("Owner")
  consultingHoldings Holding[]         @relation("Consultant")
  documents          Document[]
  liabilities        Liability[]
  assets             Asset[]
  snapshots          MonthlySnapshot[]
  heirs              Heir[]
  addressId          String?
  address            Address?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Heir {
  id                   String        @id @default(uuid())
  name                 String
  relation             HeirRelation
  gender               Gender?
  phone                String?
  percentage           Decimal
  document             String
  documentType         DocumentType  @default(cpf)
  uploadedDocumentType DocumentType?
  photoUrl             String?
  holdingId            String?
  holding              Holding?      @relation(fields: [holdingId], references: [id])
  addressId            String?
  address              Address?      @relation(fields: [addressId], references: [id])
  documents            Document[]
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  isForcedHeir         Boolean       @default(true)
  softDeleted          Boolean       @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  deletedAt            DateTime?
}

model Document {
  id      String       @id @default(uuid())
  fileKey String
  type    DocumentType

  userId String?
  user   User?   @relation(references: [id], fields: [userId], onDelete: Cascade)

  heirId String?
  heir   Heir?   @relation(references: [id], fields: [heirId])

  assetId String?
  asset   Asset?  @relation(references: [id], fields: [assetId])
}

model Liability {
  id           String        @id @default(uuid())
  name         String
  initialValue Decimal
  currentValue Decimal
  type         LiabilityType
  lender       String?
  description  String?
  interestRate Decimal?
  dueDate      DateTime?
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  softDeleted  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}

model Asset {
  id             String         @id @default(uuid())
  description    String
  initialValue   Decimal
  currentValue   Decimal
  type           AssetType
  liquidityLevel LiquidityLevel
  addressId      String
  address        Address        @relation(references: [id], fields: [addressId])
  documents      Document[]
  userId         String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  isProtected    Boolean        @default(false) // Holding já protege o patrimônio?
  softDeleted    Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  zipCode    String
  country    String  @default("BR")

  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  heirs  Heir[]
  assets Asset[]

  @@unique([zipCode, number])
}

model Holding {
  id                String   @id @default(uuid())
  name              String
  cnpj              String   @unique
  legalEntityType   String
  taxRegime         String
  incorporationDate DateTime
  shareCapital      Decimal
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId       String @unique
  user         User   @relation("Owner", references: [id], fields: [userId], onDelete: Cascade)
  consultantId String
  consultant   User   @relation("Consultant", references: [id], fields: [consultantId], onDelete: SetNull)
  heirs        Heir[]
}

model MonthlySnapshot {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  month       DateTime
  totalAssets Decimal
  netWorth    Decimal
  createdAt   DateTime @default(now())

  @@unique([userId, month])
}

/////////////////////////////****************************/////////////////////////////////////////

enum UserType {
  client
  admin
  consultant
}

enum DocumentType {
  cpf
  rg
  passport
  cnh
  propertyDeed
  vehicleRegistrationDocument
  marriageComprovation
}

enum HeirRelation {
  child
  sibling
  parent
  spouse
  friend
  other
}

enum LiabilityType {
  creditCardDebt
  personalLoan
  wageLoan
  carLoan
  mortgage
  overdraft
  businessLoan
  taxDebt
  informalLoan
  other
}

enum AssetType {
  property
  vehicle
  stock
  fixedIncome
  company
  jewelry
  cash
  crypto
  other
}

enum MaritalStatusEnum {
  single
  married
  divorced
  widowed
  separated
}

enum Gender {
  male
  female
  notInformed
}

enum LiquidityLevel {
  high
  medium
  low
}
