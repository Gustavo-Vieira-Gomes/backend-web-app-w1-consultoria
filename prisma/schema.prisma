// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

///////////////////////////////*************************////////////////////////////////////////////////////////

model User {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  document          String?             @unique
  documentType      DocumentType        @default(cpf)
  password_hash     String
  birth_date        DateTime?
  phone             String?
  userType          UserType            @default(client)
  documents         Document[]
  liabilities       Liability[]
  assets            Asset[]
  inflows           Inflow[]
  recurringInflows  RecurringInflows[]
  outflows          Outflow[]
  recurringOutflows RecurringOutflows[]
  addressId         String?
  address           Address?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Heir {
  id             String       @id @default(uuid())
  name           String
  relation       HeirRelation
  phone          String?
  document       String
  documentType   DocumentType @default(cpf)
  percentage     Decimal
  address        Address?
  is_forced_heir Boolean      @default(true)
  softDeleted    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
}

model Document {
  id               String           @id @default(uuid())
  userId           String
  user             User             @relation(references: [id], fields: [userId])
  documentCategory DocumentCategory
  documentPhotoUrl String
}

model Liability {
  id           String        @id @default(uuid())
  userId       String
  user         User          @relation(fields: [userId], references: [id])
  type         LiabilityType
  description  String
  initialValue Decimal
  currentValue Decimal
  interestRate Decimal?
  dueDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Asset {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          AssetType
  description   String
  value         Decimal
  monthlyIncome Decimal?
  location      Address?
  isProtected   Boolean   @default(false) // Holding já protege o patrimônio?
  softDeleted   Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Address {
  id         String  @id @default(uuid())
  street     String
  number     String
  complement String?
  district   String
  city       String
  state      String
  zipCode    String
  country    String  @default("BR")
  userId     String? @unique
  user       User?   @relation(fields: [userId], references: [id])
  heirId     String? @unique
  heir       Heir?   @relation(references: [id], fields: [heirId])
  assetId    String? @unique
  asset      Asset?  @relation(references: [id], fields: [assetId])
}

model Inflow {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  description   String
  inflowType    InflowType
  value         Decimal
  date          DateTime
  isPredicted   Boolean            @default(false)
  recurringId   String?
  recurring     RecurringInflows?  @relation(fields: [recurringId], references: [id])
  entityRelated EntityRelatedType?
  entityId      String?
  softDeleted   Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
}

model RecurringInflows {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  description   String
  inflowType    InflowType
  value         Decimal
  frequency     FrequencyEnum
  startDate     DateTime
  endDate       DateTime?
  inflows       Inflow[]
  entityRelated EntityRelatedType?
  entityId      String?
  softDeleted   Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
}

model Outflow {
  id                  String             @id @default(uuid())
  userId              String
  user                User               @relation(fields: [userId], references: [id])
  description         String
  outflowType         OutflowType
  value               Decimal
  date                DateTime
  isPredicted         Boolean            @default(false)
  recurringId         String?
  recurring           RecurringOutflows? @relation(fields: [recurringOutflowsId], references: [id])
  entityRelated       EntityRelatedType?
  entityId            String?
  softDeleted         Boolean            @default(false)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  deletedAt           DateTime?
  recurringOutflowsId String?
}

model RecurringOutflows {
  id            String             @id @default(uuid())
  userId        String
  user          User               @relation(fields: [userId], references: [id])
  description   String
  outflowType   OutflowType
  value         Decimal
  frequency     FrequencyEnum
  startDate     DateTime
  endDate       DateTime?
  outflows      Outflow[]
  entityRelated EntityRelatedType?
  entityId      String?
  softDeleted   Boolean            @default(false)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  deletedAt     DateTime?
}

/////////////////////////////****************************/////////////////////////////////////////

enum UserType {
  client
  admin
  consultant
}

enum DocumentType {
  cpf
  rg
  passport
  cnh
}

enum DocumentCategory {
  propertyDeed
  vehicleRegistrationDocument
  testament
}

enum HeirRelation {
  child
  sibling
  parent
  spouse
  friend
  other
}

enum LiabilityType {
  creditCardDebt
  personalLoan
  wageLoan
  carLoan
  mortgage
  overdraft
  businessLoan
  taxDebt
  informalLoan
  other
}

enum AssetType {
  property
  vehicle
  stock
  fixedIncome
  company
  jewelry
  cash
  crypto
  other
}

enum OwnerType {
  user
  asset
}

enum InflowType {
  salary
  bonus
  commission
  freelanceIncome
  rentalIncome
  dividends
  interestIncome
  royalties
  profitDistribution
  stockSale
  propertySale
  vehicleSale
  fundRedemption
  capitalGain
  inheritance
  insurancePayout
  reimbursement
  donationReceived
  taxRefund
  accountTransfer
  other
}

enum EntityRelatedType {
  asset
  liabilty
}

enum FrequencyEnum {
  daily
  weekly
  biweekly
  monthly
  bimonthly
  quarterly
  semiannual
  annual
}

enum OutflowType {
  rent
  condominiumFee
  propertyTax
  homeInsurance
  homeMaintenance
  carLoanPayment
  fuel
  vehicleMaintenance
  carInsurance
  vehicleTax
  publicTransportation
  groceries
  diningOut
  foodDelivery
  electricity
  waterAndSewage
  internet
  phone
  gas
  cableTv
  loanPayment
  creditCardPayment
  interestOrPenalties
  installmentPayment
  taxPayment
  healthInsurance
  medications
  medicalConsultation
  medicalExams
  tuition
  coursesAndWorkshops
  schoolSupplies
  clothing
  entertainment
  gymMembership
  gifts
  subscriptions
  donations
  other
}
